{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Util_1 = require(\"./Util\");\nvar Context_1 = require(\"./Context\");\nvar Global_1 = require(\"./Global\");\nvar Factory_1 = require(\"./Factory\");\nvar Validators_1 = require(\"./Validators\");\nvar _pixelRatio;\nfunction getDevicePixelRatio() {\n  if (_pixelRatio) {\n    return _pixelRatio;\n  }\n  var canvas = Util_1.Util.createCanvasElement();\n  var context = canvas.getContext('2d');\n  _pixelRatio = function () {\n    var devicePixelRatio = Global_1.Konva._global.devicePixelRatio || 1,\n      backingStoreRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n    return devicePixelRatio / backingStoreRatio;\n  }();\n  return _pixelRatio;\n}\nvar Canvas = function () {\n  function Canvas(config) {\n    this.pixelRatio = 1;\n    this.width = 0;\n    this.height = 0;\n    this.isCache = false;\n    var conf = config || {};\n    var pixelRatio = conf.pixelRatio || Global_1.Konva.pixelRatio || getDevicePixelRatio();\n    this.pixelRatio = pixelRatio;\n    this._canvas = Util_1.Util.createCanvasElement();\n    this._canvas.style.padding = '0';\n    this._canvas.style.margin = '0';\n    this._canvas.style.border = '0';\n    this._canvas.style.background = 'transparent';\n    this._canvas.style.position = 'absolute';\n    this._canvas.style.top = '0';\n    this._canvas.style.left = '0';\n  }\n  Canvas.prototype.getContext = function () {\n    return this.context;\n  };\n  Canvas.prototype.getPixelRatio = function () {\n    return this.pixelRatio;\n  };\n  Canvas.prototype.setPixelRatio = function (pixelRatio) {\n    var previousRatio = this.pixelRatio;\n    this.pixelRatio = pixelRatio;\n    this.setSize(this.getWidth() / previousRatio, this.getHeight() / previousRatio);\n  };\n  Canvas.prototype.setWidth = function (width) {\n    this.width = this._canvas.width = width * this.pixelRatio;\n    this._canvas.style.width = width + 'px';\n    var pixelRatio = this.pixelRatio,\n      _context = this.getContext()._context;\n    _context.scale(pixelRatio, pixelRatio);\n  };\n  Canvas.prototype.setHeight = function (height) {\n    this.height = this._canvas.height = height * this.pixelRatio;\n    this._canvas.style.height = height + 'px';\n    var pixelRatio = this.pixelRatio,\n      _context = this.getContext()._context;\n    _context.scale(pixelRatio, pixelRatio);\n  };\n  Canvas.prototype.getWidth = function () {\n    return this.width;\n  };\n  Canvas.prototype.getHeight = function () {\n    return this.height;\n  };\n  Canvas.prototype.setSize = function (width, height) {\n    this.setWidth(width || 0);\n    this.setHeight(height || 0);\n  };\n  Canvas.prototype.toDataURL = function (mimeType, quality) {\n    try {\n      return this._canvas.toDataURL(mimeType, quality);\n    } catch (e) {\n      try {\n        return this._canvas.toDataURL();\n      } catch (err) {\n        Util_1.Util.error('Unable to get data URL. ' + err.message + ' For more info read https://konvajs.org/docs/posts/Tainted_Canvas.html.');\n        return '';\n      }\n    }\n  };\n  return Canvas;\n}();\nexports.Canvas = Canvas;\nFactory_1.Factory.addGetterSetter(Canvas, 'pixelRatio', undefined, Validators_1.getNumberValidator());\nvar SceneCanvas = function (_super) {\n  __extends(SceneCanvas, _super);\n  function SceneCanvas(config) {\n    if (config === void 0) {\n      config = {\n        width: 0,\n        height: 0\n      };\n    }\n    var _this = _super.call(this, config) || this;\n    _this.context = new Context_1.SceneContext(_this);\n    _this.setSize(config.width, config.height);\n    return _this;\n  }\n  return SceneCanvas;\n}(Canvas);\nexports.SceneCanvas = SceneCanvas;\nvar HitCanvas = function (_super) {\n  __extends(HitCanvas, _super);\n  function HitCanvas(config) {\n    if (config === void 0) {\n      config = {\n        width: 0,\n        height: 0\n      };\n    }\n    var _this = _super.call(this, config) || this;\n    _this.hitCanvas = true;\n    _this.context = new Context_1.HitContext(_this);\n    _this.setSize(config.width, config.height);\n    return _this;\n  }\n  return HitCanvas;\n}(Canvas);\nexports.HitCanvas = HitCanvas;","map":null,"metadata":{},"sourceType":"script"}