{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Global_1 = require(\"./Global\");\nvar Captures = new Map();\nvar SUPPORT_POINTER_EVENTS = Global_1.Konva._global['PointerEvent'] !== undefined;\nfunction getCapturedShape(pointerId) {\n  return Captures.get(pointerId);\n}\nexports.getCapturedShape = getCapturedShape;\nfunction createEvent(evt) {\n  return {\n    evt: evt,\n    pointerId: evt.pointerId\n  };\n}\nexports.createEvent = createEvent;\nfunction hasPointerCapture(pointerId, shape) {\n  return Captures.get(pointerId) === shape;\n}\nexports.hasPointerCapture = hasPointerCapture;\nfunction setPointerCapture(pointerId, shape) {\n  releaseCapture(pointerId);\n  var stage = shape.getStage();\n  if (!stage) return;\n  Captures.set(pointerId, shape);\n  if (SUPPORT_POINTER_EVENTS) {\n    shape._fire('gotpointercapture', createEvent(new PointerEvent('gotpointercapture')));\n  }\n}\nexports.setPointerCapture = setPointerCapture;\nfunction releaseCapture(pointerId, target) {\n  var shape = Captures.get(pointerId);\n  if (!shape) return;\n  var stage = shape.getStage();\n  if (stage && stage.content) {}\n  Captures.delete(pointerId);\n  if (SUPPORT_POINTER_EVENTS) {\n    shape._fire('lostpointercapture', createEvent(new PointerEvent('lostpointercapture')));\n  }\n}\nexports.releaseCapture = releaseCapture;","map":null,"metadata":{},"sourceType":"script"}