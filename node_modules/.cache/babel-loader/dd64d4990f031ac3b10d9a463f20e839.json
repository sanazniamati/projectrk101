{"ast":null,"code":"import _slicedToArray from \"E:\\\\webstorm-projects\\\\projectrk101\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"E:\\\\webstorm-projects\\\\projectrk101\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _this = this,\n  _jsxFileName = \"E:\\\\webstorm-projects\\\\projectrk101\\\\src\\\\index.js\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { Stage, Layer, Line, Transformer } from \"react-konva\";\nvar Rectangle = function Rectangle(_ref) {\n  var shapeProps = _ref.shapeProps,\n    onSelect = _ref.onSelect,\n    onChange = _ref.onChange;\n  var shapeRef = React.useRef();\n  return /*#__PURE__*/React.createElement(Line, Object.assign({\n    onClick: function onClick() {\n      return onSelect(shapeRef);\n    },\n    onTap: function onTap() {\n      return onSelect(shapeRef);\n    }\n    // ref={shapeRef.current[getKey]}\n    ,\n    ref: shapeRef\n  }, shapeProps, {\n    name: \"rectangle\",\n    draggable: true,\n    closed: true,\n    onDragEnd: function onDragEnd(e) {\n      onChange(_objectSpread({}, shapeProps, {\n        x: e.target.x(),\n        y: e.target.y()\n      }));\n    },\n    onTransformEnd: function onTransformEnd() {\n      // transformer is changing scale of the node\n      // and NOT its width or height\n      // but in the store we have only width and height\n      // to match the data better we will reset scale on transform end\n      var node = shapeRef.current;\n      var scaleX = node.scaleX();\n      var scaleY = node.scaleY();\n\n      // we will reset it back\n      node.scaleX(1);\n      node.scaleY(1);\n      onChange(_objectSpread({}, shapeProps, {\n        x: node.x(),\n        y: node.y(),\n        // set minimal value\n        width: Math.max(5, node.width() * scaleX),\n        height: Math.max(node.height() * scaleY)\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }\n  }));\n};\nvar initialRectangles = [{\n  x: 10,\n  y: 10,\n  points: [50, 50, 150, 50, 100, 150],\n  tension: 0.5,\n  fill: \"red\",\n  id: \"blob1\"\n}, {\n  x: 10,\n  y: 70,\n  points: [50, 50, 150, 50, 100, 150],\n  tension: 0.5,\n  fill: \"green\",\n  id: \"blob2\"\n}, {\n  x: 10,\n  y: 130,\n  points: [50, 50, 150, 50, 100, 150],\n  tension: 0.5,\n  fill: \"yellow\",\n  id: \"blob3\"\n}];\nvar App = function App() {\n  var _React$useState = React.useState(initialRectangles),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    rectangles = _React$useState2[0],\n    setRectangles = _React$useState2[1];\n  var _React$useState3 = React.useState(null),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    selectedId = _React$useState4[0],\n    selectShape = _React$useState4[1];\n  var _React$useState5 = React.useState([]),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    nodesArray = _React$useState6[0],\n    setNodes = _React$useState6[1];\n  var trRef = React.useRef();\n  var layerRef = React.useRef();\n  var Konva = window.Konva;\n  var checkDeselect = function checkDeselect(e) {\n    // deselect when clicked on empty area\n    var clickedOnEmpty = e.target === e.target.getStage();\n    if (clickedOnEmpty) {\n      selectShape(null);\n      trRef.current.nodes([]);\n      setNodes([]);\n      // layerRef.current.remove(selectionRectangle);\n    }\n  };\n\n  var selectionRectRef = React.useRef();\n  var selection = React.useRef({\n    visible: false,\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0\n  });\n  var updateSelectionRect = function updateSelectionRect() {\n    var node = selectionRectRef.current;\n    node.setAttrs({\n      visible: selection.current.visible,\n      x: Math.min(selection.current.x1, selection.current.x2),\n      y: Math.min(selection.current.y1, selection.current.y2),\n      width: Math.abs(selection.current.x1 - selection.current.x2),\n      height: Math.abs(selection.current.y1 - selection.current.y2),\n      fill: \"rgba(0, 161, 255, 0.3)\"\n    });\n    node.getLayer().batchDraw();\n  };\n  var oldPos = React.useRef(null);\n  var onMouseDown = function onMouseDown(e) {\n    var isElement = e.target.findAncestor(\".elements-container\");\n    var isTransformer = e.target.findAncestor(\"Transformer\");\n    if (isElement || isTransformer) {\n      return;\n    }\n    var pos = e.target.getStage().getPointerPosition();\n    selection.current.visible = true;\n    selection.current.x1 = pos.x;\n    selection.current.y1 = pos.y;\n    selection.current.x2 = pos.x;\n    selection.current.y2 = pos.y;\n    updateSelectionRect();\n  };\n  var onMouseMove = function onMouseMove(e) {\n    if (!selection.current.visible) {\n      return;\n    }\n    var pos = e.target.getStage().getPointerPosition();\n    selection.current.x2 = pos.x;\n    selection.current.y2 = pos.y;\n    updateSelectionRect();\n  };\n  var onMouseUp = function onMouseUp() {\n    oldPos.current = null;\n    if (!selection.current.visible) {\n      return;\n    }\n    var selBox = selectionRectRef.current.getClientRect();\n    var elements = [];\n    layerRef.current.find(\".rectangle\").forEach(function (elementNode) {\n      var elBox = elementNode.getClientRect();\n      if (Konva.Util.haveIntersection(selBox, elBox)) {\n        elements.push(elementNode);\n      }\n    });\n    trRef.current.nodes(elements);\n    selection.current.visible = false;\n    // disable click event\n    Konva.listenClickTap = false;\n    updateSelectionRect();\n  };\n  var onClickTap = function onClickTap(e) {\n    // if we are selecting with rect, do nothing\n    if (selection.visible()) {\n      return;\n    }\n    var stage = e.target.getStage();\n    var layer = layerRef.current;\n    var tr = trRef.current;\n    // if click on empty area - remove all selections\n    if (e.target === stage) {\n      selectShape(null);\n      setNodes([]);\n      tr.nodes([]);\n      layer.draw();\n      return;\n    }\n\n    // do nothing if clicked NOT on our rectangles\n    if (!e.target.hasName(\".rect\")) {\n      return;\n    }\n\n    // do we press shift or ctrl?\n    var metaPressed = e.evt.shiftKey || e.evt.ctrlKey || e.evt.metaKey;\n    var isSelected = tr.nodes().indexOf(e.target) >= 0;\n    if (!metaPressed && !isSelected) {\n      // if no key pressed and the node is not selected\n      // select just one\n      tr.nodes([e.target]);\n    } else if (metaPressed && isSelected) {\n      // if we pressed keys and node was selected\n      // we need to remove it from selection:\n      var nodes = tr.nodes().slice(); // use slice to have new copy of array\n      // remove node from array\n      nodes.splice(nodes.indexOf(e.target), 1);\n      tr.nodes(nodes);\n    } else if (metaPressed && !isSelected) {\n      // add the node into selection\n      var _nodes = tr.nodes().concat([e.target]);\n      tr.nodes(_nodes);\n    }\n    layer.draw();\n  };\n  return /*#__PURE__*/React.createElement(Stage, {\n    width: window.innerWidth + 400,\n    height: window.innerHeight + 400,\n    onMouseDown: onMouseDown,\n    onMouseUp: onMouseUp,\n    onMouseMove: onMouseMove,\n    onTouchStart: checkDeselect,\n    onClick: onClickTap,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Layer, {\n    ref: layerRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }\n  }, rectangles.map(function (rect, i) {\n    return /*#__PURE__*/React.createElement(Rectangle, {\n      key: i,\n      getKey: i,\n      shapeProps: rect,\n      isSelected: rect.id === selectedId,\n      getLength: rectangles.length,\n      onSelect: function onSelect(e) {\n        if (e.current !== undefined) {\n          var temp = nodesArray;\n          if (!nodesArray.includes(e.current)) temp.push(e.current);\n          setNodes(temp);\n          trRef.current.nodes(nodesArray);\n          trRef.current.nodes(nodesArray);\n          trRef.current.getLayer().batchDraw();\n        }\n        selectShape(rect.id);\n      },\n      onChange: function onChange(newAttrs) {\n        var rects = rectangles.slice();\n        rects[i] = newAttrs;\n        setRectangles(rects);\n        // console.log(rects)\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }\n    });\n  }), /*#__PURE__*/React.createElement(Transformer\n  // ref={trRef.current[getKey]}\n  , {\n    ref: trRef,\n    boundBoxFunc: function boundBoxFunc(oldBox, newBox) {\n      // limit resize\n      if (newBox.width < 5 || newBox.height < 5) {\n        return oldBox;\n      }\n      return newBox;\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Rect, {\n    fill: \"rgba(0,0,255,0.5)\",\n    ref: selectionRectRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 9\n    }\n  })));\n};\nrender( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 8\n  }\n}), document.getElementById(\"root\"));","map":{"version":3,"names":["React","render","Stage","Layer","Line","Transformer","Rectangle","shapeProps","onSelect","onChange","shapeRef","useRef","e","x","target","y","node","current","scaleX","scaleY","width","Math","max","height","initialRectangles","points","tension","fill","id","App","useState","rectangles","setRectangles","selectedId","selectShape","nodesArray","setNodes","trRef","layerRef","Konva","window","checkDeselect","clickedOnEmpty","getStage","nodes","selectionRectRef","selection","visible","x1","y1","x2","y2","updateSelectionRect","setAttrs","min","abs","getLayer","batchDraw","oldPos","onMouseDown","isElement","findAncestor","isTransformer","pos","getPointerPosition","onMouseMove","onMouseUp","selBox","getClientRect","elements","find","forEach","elementNode","elBox","Util","haveIntersection","push","listenClickTap","onClickTap","stage","layer","tr","draw","hasName","metaPressed","evt","shiftKey","ctrlKey","metaKey","isSelected","indexOf","slice","splice","concat","innerWidth","innerHeight","map","rect","i","length","undefined","temp","includes","newAttrs","rects","oldBox","newBox","document","getElementById"],"sources":["E:/webstorm-projects/projectrk101/src/index.js"],"sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Stage, Layer, Line, Transformer } from \"react-konva\";\nconst Rectangle = ({ shapeProps, onSelect, onChange }) => {\n  const shapeRef = React.useRef();\n\n  return (\n    <Line\n      onClick={() => onSelect(shapeRef)}\n      onTap={() => onSelect(shapeRef)}\n      // ref={shapeRef.current[getKey]}\n      ref={shapeRef}\n      {...shapeProps}\n      name=\"rectangle\"\n      draggable\n      closed={true}\n      onDragEnd={(e) => {\n        onChange({\n          ...shapeProps,\n          x: e.target.x(),\n          y: e.target.y()\n        });\n      }}\n      onTransformEnd={() => {\n        // transformer is changing scale of the node\n        // and NOT its width or height\n        // but in the store we have only width and height\n        // to match the data better we will reset scale on transform end\n        const node = shapeRef.current;\n        const scaleX = node.scaleX();\n        const scaleY = node.scaleY();\n\n        // we will reset it back\n        node.scaleX(1);\n        node.scaleY(1);\n        onChange({\n          ...shapeProps,\n          x: node.x(),\n          y: node.y(),\n          // set minimal value\n          width: Math.max(5, node.width() * scaleX),\n          height: Math.max(node.height() * scaleY)\n        });\n      }}\n    />\n  );\n};\n\nconst initialRectangles = [\n  {\n    x: 10,\n    y: 10,\n    points: [50, 50, 150, 50, 100, 150],\n    tension: 0.5,\n\n    fill: \"red\",\n    id: \"blob1\"\n  },\n  {\n    x: 10,\n    y: 70,\n    points: [50, 50, 150, 50, 100, 150],\n    tension: 0.5,\n    fill: \"green\",\n    id: \"blob2\"\n  },\n  {\n    x: 10,\n    y:130,\n    points: [50, 50, 150, 50, 100, 150],\n    tension: 0.5,\n    fill: \"yellow\",\n    id: \"blob3\"\n  }\n];\n\nconst App = () => {\n  const [rectangles, setRectangles] = React.useState(initialRectangles);\n  const [selectedId, selectShape] = React.useState(null);\n  const [nodesArray, setNodes] = React.useState([]);\n  const trRef = React.useRef();\n  const layerRef = React.useRef();\n  const Konva = window.Konva;\n\n  const checkDeselect = (e) => {\n    // deselect when clicked on empty area\n    const clickedOnEmpty = e.target === e.target.getStage();\n    if (clickedOnEmpty) {\n      selectShape(null);\n      trRef.current.nodes([]);\n      setNodes([]);\n      // layerRef.current.remove(selectionRectangle);\n    }\n  };\n\n  const selectionRectRef = React.useRef();\n  const selection = React.useRef({\n    visible: false,\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0\n  });\n\n  const updateSelectionRect = () => {\n    const node = selectionRectRef.current;\n    node.setAttrs({\n      visible: selection.current.visible,\n      x: Math.min(selection.current.x1, selection.current.x2),\n      y: Math.min(selection.current.y1, selection.current.y2),\n      width: Math.abs(selection.current.x1 - selection.current.x2),\n      height: Math.abs(selection.current.y1 - selection.current.y2),\n      fill: \"rgba(0, 161, 255, 0.3)\"\n    });\n    node.getLayer().batchDraw();\n  };\n\n  const oldPos = React.useRef(null);\n  const onMouseDown = (e) => {\n    const isElement = e.target.findAncestor(\".elements-container\");\n    const isTransformer = e.target.findAncestor(\"Transformer\");\n    if (isElement || isTransformer) {\n      return;\n    }\n    const pos = e.target.getStage().getPointerPosition();\n    selection.current.visible = true;\n    selection.current.x1 = pos.x;\n    selection.current.y1 = pos.y;\n    selection.current.x2 = pos.x;\n    selection.current.y2 = pos.y;\n    updateSelectionRect();\n  };\n\n  const onMouseMove = (e) => {\n    if (!selection.current.visible) {\n      return;\n    }\n    const pos = e.target.getStage().getPointerPosition();\n    selection.current.x2 = pos.x;\n    selection.current.y2 = pos.y;\n    updateSelectionRect();\n  };\n\n  const onMouseUp = () => {\n    oldPos.current = null;\n    if (!selection.current.visible) {\n      return;\n    }\n    const selBox = selectionRectRef.current.getClientRect();\n\n    const elements = [];\n    layerRef.current.find(\".rectangle\").forEach((elementNode) => {\n      const elBox = elementNode.getClientRect();\n      if (Konva.Util.haveIntersection(selBox, elBox)) {\n        elements.push(elementNode);\n      }\n    });\n    trRef.current.nodes(elements);\n    selection.current.visible = false;\n    // disable click event\n    Konva.listenClickTap = false;\n    updateSelectionRect();\n  };\n\n  const onClickTap = (e) => {\n    // if we are selecting with rect, do nothing\n    if (selection.visible()) {\n      return;\n    }\n    let stage = e.target.getStage();\n    let layer = layerRef.current;\n    let tr = trRef.current;\n    // if click on empty area - remove all selections\n    if (e.target === stage) {\n      selectShape(null);\n      setNodes([]);\n      tr.nodes([]);\n      layer.draw();\n      return;\n    }\n\n    // do nothing if clicked NOT on our rectangles\n    if (!e.target.hasName(\".rect\")) {\n      return;\n    }\n\n    // do we press shift or ctrl?\n    const metaPressed = e.evt.shiftKey || e.evt.ctrlKey || e.evt.metaKey;\n    const isSelected = tr.nodes().indexOf(e.target) >= 0;\n\n    if (!metaPressed && !isSelected) {\n      // if no key pressed and the node is not selected\n      // select just one\n      tr.nodes([e.target]);\n    } else if (metaPressed && isSelected) {\n      // if we pressed keys and node was selected\n      // we need to remove it from selection:\n      const nodes = tr.nodes().slice(); // use slice to have new copy of array\n      // remove node from array\n      nodes.splice(nodes.indexOf(e.target), 1);\n      tr.nodes(nodes);\n    } else if (metaPressed && !isSelected) {\n      // add the node into selection\n      const nodes = tr.nodes().concat([e.target]);\n      tr.nodes(nodes);\n    }\n    layer.draw();\n  };\n\n  return (\n    <Stage\n      width={window.innerWidth + 400}\n      height={window.innerHeight + 400}\n      onMouseDown={onMouseDown}\n      onMouseUp={onMouseUp}\n      onMouseMove={onMouseMove}\n      onTouchStart={checkDeselect}\n      onClick={onClickTap}\n    >\n      <Layer ref={layerRef}>\n        {rectangles.map((rect, i) => {\n          return (\n            <Rectangle\n              key={i}\n              getKey={i}\n              shapeProps={rect}\n              isSelected={rect.id === selectedId}\n              getLength={rectangles.length}\n              onSelect={(e) => {\n                if (e.current !== undefined) {\n                  let temp = nodesArray;\n                  if (!nodesArray.includes(e.current)) temp.push(e.current);\n                  setNodes(temp);\n                  trRef.current.nodes(nodesArray);\n                  trRef.current.nodes(nodesArray);\n                  trRef.current.getLayer().batchDraw();\n                }\n                selectShape(rect.id);\n              }}\n              onChange={(newAttrs) => {\n                const rects = rectangles.slice();\n                rects[i] = newAttrs;\n                setRectangles(rects);\n                // console.log(rects)\n              }}\n            />\n          );\n        })}\n\n        <Transformer\n          // ref={trRef.current[getKey]}\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            // limit resize\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n        <Rect fill=\"rgba(0,0,255,0.5)\" ref={selectionRectRef} />\n      </Layer>\n    </Stage>\n  );\n};\n\nrender(<App />, document.getElementById(\"root\"));\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}