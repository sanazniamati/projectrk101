{"ast":null,"code":"import _slicedToArray from \"E:\\\\webstorm-projects\\\\projectrk101\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"E:\\\\webstorm-projects\\\\projectrk101\\\\src\\\\App.js\";\nimport React from \"react\";\nimport TransformerRectangel from './TransformerRectangel';\nimport { Layer, Rect, Stage, Transformer } from \"react-konva\";\nvar initialPiks = [{\n  x: 10,\n  y: 10,\n  points: [50, 50, 150, 50, 100, 150],\n  tension: 0.5,\n  fill: \"red\",\n  id: \"blob1\"\n}, {\n  x: 10,\n  y: 70,\n  points: [50, 50, 150, 50, 100, 150],\n  tension: 0.5,\n  fill: \"green\",\n  id: \"blob2\"\n}, {\n  x: 10,\n  y: 130,\n  points: [50, 50, 150, 50, 100, 150],\n  tension: 0.5,\n  fill: \"yellow\",\n  id: \"blob3\"\n}];\nvar App = function App() {\n  var _React$useState = React.useState(initialPiks),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    piks = _React$useState2[0],\n    setPiks = _React$useState2[1];\n  var _React$useState3 = React.useState(null),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    selectShape = _React$useState4[0],\n    setSelectShape = _React$useState4[1];\n  var _React$useState5 = React.useState([]),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    nodesArray = _React$useState6[0],\n    setNodes = _React$useState6[1];\n  var trRef = React.useRef();\n  var layerRef = React.useRef();\n  var Konva = window.Konva;\n  var checkDeselect = function checkDeselect(e) {\n    // deselect when clicked on empty area\n    var clickedOnEmpty = e.target === e.target.getStage();\n    if (clickedOnEmpty) {\n      setSelectShape(null);\n      trRef.current.nodes([]);\n      setNodes([]);\n      // layerRef.current.remove(selectionRectangle);\n    }\n  };\n\n  var selectionRectRef = React.useRef();\n  var selection = React.useRef({\n    visible: false,\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0\n  });\n  var updateSelectionRect = function updateSelectionRect() {\n    var node = selectionRectRef.current;\n    node.setAttrs({\n      visible: selection.current.visible,\n      x: Math.min(selection.current.x1, selection.current.x2),\n      y: Math.min(selection.current.y1, selection.current.y2),\n      width: Math.abs(selection.current.x1 - selection.current.x2),\n      height: Math.abs(selection.current.y1 - selection.current.y2),\n      fill: \"rgba(0, 161, 255, 0.3)\"\n    });\n    node.getLayer().batchDraw();\n  };\n  var oldPos = React.useRef(null);\n  var onMouseDown = function onMouseDown(e) {\n    var isElement = e.target.findAncestor(\".elements-container\");\n    var isTransformer = e.target.findAncestor(\"Transformer\");\n    if (isElement || isTransformer) {\n      return;\n    }\n    var pos = e.target.getStage().getPointerPosition();\n    selection.current.visible = true;\n    selection.current.x1 = pos.x;\n    selection.current.y1 = pos.y;\n    selection.current.x2 = pos.x;\n    selection.current.y2 = pos.y;\n    updateSelectionRect();\n  };\n  var onMouseMove = function onMouseMove(e) {\n    if (!selection.current.visible) {\n      return;\n    }\n    var pos = e.target.getStage().getPointerPosition();\n    selection.current.x2 = pos.x;\n    selection.current.y2 = pos.y;\n    updateSelectionRect();\n  };\n  var onMouseUp = function onMouseUp() {\n    oldPos.current = null;\n    if (!selection.current.visible) {\n      return;\n    }\n    var selBox = selectionRectRef.current.getClientRect();\n    var elements = [];\n    layerRef.current.find(\".rectangle\").forEach(function (elementNode) {\n      var elBox = elementNode.getClientRect();\n      if (Konva.Util.haveIntersection(selBox, elBox)) {\n        elements.push(elementNode);\n      }\n    });\n    trRef.current.nodes(elements);\n    selection.current.visible = false;\n    // disable click event\n    Konva.listenClickTap = false;\n    updateSelectionRect();\n  };\n  var onClickTap = function onClickTap(e) {\n    // if we are selecting with rect, do nothing\n    if (selection.visible()) {\n      return;\n    }\n    var stage = e.target.getStage();\n    var layer = layerRef.current;\n    var tr = trRef.current;\n    // if click on empty area - remove all selections\n    if (e.target === stage) {\n      setSelectShape(null);\n      setNodes([]);\n      tr.nodes([]);\n      layer.draw();\n      return;\n    }\n\n    // do nothing if clicked NOT on our piks\n    if (!e.target.hasName(\".rect\")) {\n      return;\n    }\n\n    // do we press shift or ctrl?\n    var metaPressed = e.evt.shiftKey || e.evt.ctrlKey || e.evt.metaKey;\n    var isSelected = tr.nodes().indexOf(e.target) >= 0;\n    if (!metaPressed && !isSelected) {\n      // if no key pressed and the node is not selected\n      // select just one\n      tr.nodes([e.target]);\n    } else if (metaPressed && isSelected) {\n      // if we pressed keys and node was selected\n      // we need to remove it from selection:\n      var nodes = tr.nodes().slice(); // use slice to have new copy of array\n      // remove node from array\n      nodes.splice(nodes.indexOf(e.target), 1);\n      tr.nodes(nodes);\n    } else if (metaPressed && !isSelected) {\n      // add the node into selection\n      var _nodes = tr.nodes().concat([e.target]);\n      tr.nodes(_nodes);\n    }\n    layer.draw();\n  };\n  return /*#__PURE__*/React.createElement(Stage, {\n    width: window.innerWidth + 400,\n    height: window.innerHeight + 400,\n    onMouseDown: onMouseDown,\n    onMouseUp: onMouseUp,\n    onMouseMove: onMouseMove,\n    onTouchStart: checkDeselect,\n    onClick: onClickTap,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Layer, {\n    ref: layerRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }, piks.map(function (rect, i) {\n    return /*#__PURE__*/React.createElement(TransformerRectangel, {\n      key: i,\n      getKey: i,\n      shapeProps: rect,\n      isSelected: rect.id === selectShape,\n      getLength: piks.length,\n      onSelect: function onSelect(e) {\n        if (e.current !== undefined) {\n          var temp = nodesArray;\n          if (!nodesArray.includes(e.current)) temp.push(e.current);\n          setNodes(temp);\n          trRef.current.nodes(nodesArray);\n          trRef.current.nodes(nodesArray);\n          trRef.current.getLayer().batchDraw();\n        }\n        setSelectShape(rect.id);\n      },\n      onChange: function onChange(newAttrs) {\n        var rects = piks.slice();\n        rects[i] = newAttrs;\n        setPiks(rects);\n        // console.log(rects)\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 25\n      }\n    });\n  }), /*#__PURE__*/React.createElement(Transformer\n  // ref={trRef.current[getKey]}\n  , {\n    ref: trRef,\n    boundBoxFunc: function boundBoxFunc(oldBox, newBox) {\n      // limit resize\n      if (newBox.width < 5 || newBox.height < 5) {\n        return oldBox;\n      }\n      return newBox;\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Rect, {\n    fill: \"rgba(0,0,255,0.5)\",\n    ref: selectionRectRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 17\n    }\n  })));\n};\nexport default App;","map":{"version":3,"names":["React","TransformerRectangel","Layer","Rect","Stage","Transformer","initialPiks","x","y","points","tension","fill","id","App","useState","piks","setPiks","selectShape","setSelectShape","nodesArray","setNodes","trRef","useRef","layerRef","Konva","window","checkDeselect","e","clickedOnEmpty","target","getStage","current","nodes","selectionRectRef","selection","visible","x1","y1","x2","y2","updateSelectionRect","node","setAttrs","Math","min","width","abs","height","getLayer","batchDraw","oldPos","onMouseDown","isElement","findAncestor","isTransformer","pos","getPointerPosition","onMouseMove","onMouseUp","selBox","getClientRect","elements","find","forEach","elementNode","elBox","Util","haveIntersection","push","listenClickTap","onClickTap","stage","layer","tr","draw","hasName","metaPressed","evt","shiftKey","ctrlKey","metaKey","isSelected","indexOf","slice","splice","concat","innerWidth","innerHeight","map","rect","i","length","undefined","temp","includes","newAttrs","rects","oldBox","newBox"],"sources":["E:/webstorm-projects/projectrk101/src/App.js"],"sourcesContent":["import React from \"react\";\r\nimport TransformerRectangel from './TransformerRectangel'\r\nimport {Layer, Rect, Stage, Transformer} from \"react-konva\";\r\nconst initialPiks = [\r\n    {\r\n        x: 10,\r\n        y: 10,\r\n        points: [50, 50, 150, 50, 100, 150],\r\n        tension: 0.5,\r\n        fill: \"red\",\r\n        id: \"blob1\"\r\n    },\r\n    {\r\n        x: 10,\r\n        y: 70,\r\n        points: [50, 50, 150, 50, 100, 150],\r\n        tension: 0.5,\r\n        fill: \"green\",\r\n        id: \"blob2\"\r\n    },\r\n    {\r\n        x: 10,\r\n        y:130,\r\n        points: [50, 50, 150, 50, 100, 150],\r\n        tension: 0.5,\r\n        fill: \"yellow\",\r\n        id: \"blob3\"\r\n    }\r\n];\r\nconst App = () => {\r\n    const [piks, setPiks] = React.useState(initialPiks);\r\n    const [selectShape, setSelectShape] = React.useState(null);\r\n    const [nodesArray, setNodes] = React.useState([]);\r\n    const trRef = React.useRef();\r\n    const layerRef = React.useRef();\r\n    const Konva = window.Konva;\r\n\r\n    const checkDeselect = (e) => {\r\n        // deselect when clicked on empty area\r\n        const clickedOnEmpty = e.target === e.target.getStage();\r\n        if (clickedOnEmpty) {\r\n            setSelectShape(null);\r\n            trRef.current.nodes([]);\r\n            setNodes([]);\r\n            // layerRef.current.remove(selectionRectangle);\r\n        }\r\n    };\r\n\r\n    const selectionRectRef = React.useRef();\r\n    const selection = React.useRef({\r\n        visible: false,\r\n        x1: 0,\r\n        y1: 0,\r\n        x2: 0,\r\n        y2: 0\r\n    });\r\n\r\n    const updateSelectionRect = () => {\r\n        const node = selectionRectRef.current;\r\n        node.setAttrs({\r\n            visible: selection.current.visible,\r\n            x: Math.min(selection.current.x1, selection.current.x2),\r\n            y: Math.min(selection.current.y1, selection.current.y2),\r\n            width: Math.abs(selection.current.x1 - selection.current.x2),\r\n            height: Math.abs(selection.current.y1 - selection.current.y2),\r\n            fill: \"rgba(0, 161, 255, 0.3)\"\r\n        });\r\n        node.getLayer().batchDraw();\r\n    };\r\n\r\n    const oldPos = React.useRef(null);\r\n    const onMouseDown = (e) => {\r\n        const isElement = e.target.findAncestor(\".elements-container\");\r\n        const isTransformer = e.target.findAncestor(\"Transformer\");\r\n        if (isElement || isTransformer) {\r\n            return;\r\n        }\r\n        const pos = e.target.getStage().getPointerPosition();\r\n        selection.current.visible = true;\r\n        selection.current.x1 = pos.x;\r\n        selection.current.y1 = pos.y;\r\n        selection.current.x2 = pos.x;\r\n        selection.current.y2 = pos.y;\r\n        updateSelectionRect();\r\n    };\r\n\r\n    const onMouseMove = (e) => {\r\n        if (!selection.current.visible) {\r\n            return;\r\n        }\r\n        const pos = e.target.getStage().getPointerPosition();\r\n        selection.current.x2 = pos.x;\r\n        selection.current.y2 = pos.y;\r\n        updateSelectionRect();\r\n    };\r\n\r\n    const onMouseUp = () => {\r\n        oldPos.current = null;\r\n        if (!selection.current.visible) {\r\n            return;\r\n        }\r\n        const selBox = selectionRectRef.current.getClientRect();\r\n\r\n        const elements = [];\r\n        layerRef.current.find(\".rectangle\").forEach((elementNode) => {\r\n            const elBox = elementNode.getClientRect();\r\n            if (Konva.Util.haveIntersection(selBox, elBox)) {\r\n                elements.push(elementNode);\r\n            }\r\n        });\r\n        trRef.current.nodes(elements);\r\n        selection.current.visible = false;\r\n        // disable click event\r\n        Konva.listenClickTap = false;\r\n        updateSelectionRect();\r\n    };\r\n\r\n    const onClickTap = (e) => {\r\n        // if we are selecting with rect, do nothing\r\n        if (selection.visible()) {\r\n            return;\r\n        }\r\n        let stage = e.target.getStage();\r\n        let layer = layerRef.current;\r\n        let tr = trRef.current;\r\n        // if click on empty area - remove all selections\r\n        if (e.target === stage) {\r\n            setSelectShape(null);\r\n            setNodes([]);\r\n            tr.nodes([]);\r\n            layer.draw();\r\n            return;\r\n        }\r\n\r\n        // do nothing if clicked NOT on our piks\r\n        if (!e.target.hasName(\".rect\")) {\r\n            return;\r\n        }\r\n\r\n        // do we press shift or ctrl?\r\n        const metaPressed = e.evt.shiftKey || e.evt.ctrlKey || e.evt.metaKey;\r\n        const isSelected = tr.nodes().indexOf(e.target) >= 0;\r\n\r\n        if (!metaPressed && !isSelected) {\r\n            // if no key pressed and the node is not selected\r\n            // select just one\r\n            tr.nodes([e.target]);\r\n        } else if (metaPressed && isSelected) {\r\n            // if we pressed keys and node was selected\r\n            // we need to remove it from selection:\r\n            const nodes = tr.nodes().slice(); // use slice to have new copy of array\r\n            // remove node from array\r\n            nodes.splice(nodes.indexOf(e.target), 1);\r\n            tr.nodes(nodes);\r\n        } else if (metaPressed && !isSelected) {\r\n            // add the node into selection\r\n            const nodes = tr.nodes().concat([e.target]);\r\n            tr.nodes(nodes);\r\n        }\r\n        layer.draw();\r\n    };\r\n\r\n    return (\r\n        <Stage\r\n            width={window.innerWidth + 400}\r\n            height={window.innerHeight + 400}\r\n            onMouseDown={onMouseDown}\r\n            onMouseUp={onMouseUp}\r\n            onMouseMove={onMouseMove}\r\n            onTouchStart={checkDeselect}\r\n            onClick={onClickTap}\r\n        >\r\n            <Layer ref={layerRef}>\r\n                {piks.map((rect, i) => {\r\n                    return (\r\n                        <TransformerRectangel\r\n                            key={i}\r\n                            getKey={i}\r\n                            shapeProps={rect}\r\n                            isSelected={rect.id === selectShape}\r\n                            getLength={piks.length}\r\n                            onSelect={(e) => {\r\n                                if (e.current !== undefined) {\r\n                                    let temp = nodesArray;\r\n                                    if (!nodesArray.includes(e.current)) temp.push(e.current);\r\n                                    setNodes(temp);\r\n                                    trRef.current.nodes(nodesArray);\r\n                                    trRef.current.nodes(nodesArray);\r\n                                    trRef.current.getLayer().batchDraw();\r\n                                }\r\n                                setSelectShape(rect.id);\r\n                            }}\r\n                            onChange={(newAttrs) => {\r\n                                const rects = piks.slice();\r\n                                rects[i] = newAttrs;\r\n                                setPiks(rects);\r\n                                // console.log(rects)\r\n                            }}\r\n                        />\r\n                    );\r\n                })}\r\n\r\n                <Transformer\r\n                    // ref={trRef.current[getKey]}\r\n                    ref={trRef}\r\n                    boundBoxFunc={(oldBox, newBox) => {\r\n                        // limit resize\r\n                        if (newBox.width < 5 || newBox.height < 5) {\r\n                            return oldBox;\r\n                        }\r\n                        return newBox;\r\n                    }}\r\n                />\r\n                <Rect fill=\"rgba(0,0,255,0.5)\" ref={selectionRectRef} />\r\n            </Layer>\r\n        </Stage>\r\n    );\r\n};\r\n\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}